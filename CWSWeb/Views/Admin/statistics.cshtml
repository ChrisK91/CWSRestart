@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase
@{
    ViewBag.Title = "Statistics &raquo; Statistics";
    Layout = "layout.cshtml";
}
<h2>Activity and memory usage</h2>
@if (CWSWeb.Helper.CachedVariables.Stats != null && CWSWeb.Helper.CachedVariables.Stats.Keys != null && CWSWeb.Helper.CachedVariables.Stats.Keys.Length >= 2)
{ 
    <div id="activity" class="graph"></div>
    <div id="activityoverview" class="graph" style="height: 150px"></div>
}
else { 
    <p class="message">Statistics are not available. Please enable statistics and check back later.</p>
}

@section js {
    @if (CWSWeb.Helper.CachedVariables.Stats != null && CWSWeb.Helper.CachedVariables.Stats.Keys != null && CWSWeb.Helper.CachedVariables.Stats.Keys.Length >= 2)
    { 
    <script type="text/javascript">
        $(document).ready(function () {
            setInterval(function () { GeneratePlayerActivity() }, 5000);
            GeneratePlayerActivity();
        });

        var activity;
        var oldRange;
        var zoomed = false;

        function GeneratePlayerActivity() {
            $.getJSON("/API/stats/playeractivity", function (data) {
                $.getJSON("/API/stats/memoryusage", function (memory) {
                    $.getJSON("/API/stats/serverrestarts", function (restarts) {
                        if (data != null && restarts != null && data.labels != null) {
                            var dates = GetDatesFromStrings(data.labels);
                            var points = new Array(dates.length);

                            var ranges = [];

                            if (restarts != null && restarts.data != null && restarts.data.length > 0) {
                                var restartDates = GetDatesFromStrings(restarts.data);

                                ranges = new Array(restartDates.length);
                                for (var i = 0; i < restartDates.length; i++) {
                                    ranges[i] = {
                                        xaxis: { from: restartDates[i], to: restartDates[i] },
                                        color: "#f00"
                                    };
                                }
                            }

                            for (var i = 0; i < dates.length; i++) {
                                points[i] = [dates[i], data.data[i]];
                            }

                            var memDates = GetDatesFromStrings(memory.labels);
                            var memPoints = new Array(memDates.length);

                            for (var i = 0; i < memDates.length; i++) {
                                memPoints[i] = [memDates[i], memory.data[i]];
                            }

                            var options = {
                                xaxes: [{
                                    mode: "time"
                                }],
                                yaxes: [{
                                    minTickSize: 1,
                                    min: 0,
                                    position: "left"
                                }, {
                                    minTickSize: 1,
                                    min: 0,
                                    position: "right"
                                }],
                                grid: {
                                    markings: ranges
                                },
                                series: {
                                    shadowSize: 0
                                }
                            };

                            if (activity != null && zoomed) {
                                var zoom = activity.getAxes();

                                options = $.extend(true, {}, options, {
                                    xaxis: {
                                        min: zoom.xaxis.min,
                                        max: zoom.xaxis.max
                                    }
                                });
                            }

                            var points = [
                                {
                                    data: memPoints,
                                    lines: { show: true, fill: true },
                                    label: "RAM",
                                    yaxis: 2,
                                    color: "#002550"
                                },
                                {
                                    data: points,
                                    lines: { show: true, fill: true },
                                    label: "Connected players",
                                    color: "#FF5600"
                                }
                            ];

                            activity = $.plot("#activity", points, options);

                            var overviewOptions = {
                                series: {
                                    lines: {
                                        show: true,
                                        lineWidth: 1,
                                        fill: true
                                    },
                                    shadowSize: 0
                                },
                                xaxes: [{
                                    ticks: [],
                                    mode: "time"
                                }],
                                yaxes: [{
                                    ticks: [],
                                    autoscaleMargin: 0.2,
                                    min: 0
                                },
                                {
                                    ticks: [],
                                    autoscaleMargin: 0.2,
                                    min: 0
                                }],
                                selection: {
                                    mode: "x",
                                    color: "#B28053"
                                },
                                grid: {
                                    markings: ranges
                                },
                                legend: {
                                    labelFormatter: function () { return null; }
                                }
                            };

                            var overviewActivity = $.plot("#activityoverview", points, overviewOptions);

                            if (oldRange != null) {
                                overviewActivity.setSelection(oldRange, true);
                            }

                            $("#activity").bind("plotselected", function (event, ranges) {
                                activity = $.plot("#activity", points, $.extend(true, {}, options, {
                                    xaxis: {
                                        min: ranges.xaxis.from,
                                        max: ranges.xaxis.to
                                    }
                                }));

                                overviewActivity.setSelection(ranges, true);
                                zoomed = true;
                                oldRange = ranges;
                            });

                            $("#activityoverview").bind("plotselected", function (event, ranges) {
                                activity.setSelection(ranges);
                                zoomed = true;
                            });
                        }
                    });
                });
            });
        }

        function GetDatesFromStrings(data) {
            var ret = Array(data.length);

            for(var i = 0; i < data.length; i++)
            {
                ret[i] = new Date(parseInt(data[i].substr(6))).getTime();
            }

            return ret;
        }
    </script>
    }
}