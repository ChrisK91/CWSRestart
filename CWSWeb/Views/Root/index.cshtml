@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CWSWeb.Helper.CachedVariables.Statistics>
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>A CubeWorld Server Status Page</title>

    <script src="/static/js/jquery-1.10.2.min.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.time.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.selection.js" type="text/javascript"></script>

    <link href="@Url.Content("~/static/css/style.css")" rel="stylesheet" />

    <script type="text/javascript">
        $(document).ready(function () {
            setInterval(function () {
            @if (CWSWeb.Helper.CachedVariables.Stats != null && CWSWeb.Helper.CachedVariables.Stats.Keys != null && CWSWeb.Helper.CachedVariables.Stats.Keys.Length >= 2)
            { 
                @:GeneratePlayerActivity();          
            }
                UpdateServerStats();
            }, 5000);

            @if (CWSWeb.Helper.CachedVariables.Stats != null && CWSWeb.Helper.CachedVariables.Stats.Keys != null && CWSWeb.Helper.CachedVariables.Stats.Keys.Length >= 2)
            {
                @:GeneratePlayerActivity();
            }
        });

        function UpdateServerStats() {
            $.getJSON("/API/stats/", function (data) {
                if (data != null) {
                    if (data.PlayerStats.Current != null)
                        $("#active").text(data.PlayerStats.Current);

                    if (data.PlayerStats.Total != null)
                        $("#total").text(data.PlayerStats.Total);

                    if (data.FormatedRuntime != null)
                        $("#runtime").text(data.FormatedRuntime);
                }
            });
        };

        var activity;
        var oldRange;
        var zoomed = false;

        function GeneratePlayerActivity() {
            $.getJSON("/API/stats/playeractivity", function (data) {
                $.getJSON("/API/stats/serverrestarts", function (restarts) {
                    if (data != null && restarts != null && data.labels != null) {
                        var dates = GetDatesFromStrings(data.labels);
                        var points = new Array(dates.length);

                        var ranges = [];

                        if (restarts != null && restarts.data != null && restarts.data.length > 0) {
                            var restartDates = GetDatesFromStrings(restarts.data);

                            ranges = new Array(restartDates.length);
                            for (var i = 0; i < restartDates.length; i++) {
                                ranges[i] = {
                                    xaxis: { from: restartDates[i], to: restartDates[i] },
                                    color: "#f00"
                                };
                            }
                        }

                        for (var i = 0; i < dates.length; i++) {
                            points[i] = [dates[i], data.data[i]];
                        }

                        var options = {
                            xaxis: {
                                mode: "time"
                            },
                            yaxis: {
                                minTickSize: 1,
                                min: 0
                            },
                            grid: {
                                markings: ranges
                            },
                            series: {
                                lines: {
                                    show: true,
                                    lineWidth: 1,
                                    fill: true
                                },
                                shadowSize: 0
                            }
                        };

                        if (activity != null && zoomed) {
                            var zoom = activity.getAxes();

                            options = $.extend(true, {}, options, {
                                xaxis: {
                                    min: zoom.xaxis.min,
                                    max: zoom.xaxis.max
                                }
                            });
                        }

                        activity = $.plot("#activity", [{ data: points, color: "#FF5600" }], options);

                        var overviewOptions = {
                            series: {
                                lines: {
                                    show: true,
                                    lineWidth: 1,
                                    fill: true
                                },
                                shadowSize: 0
                            },
                            xaxis: {
                                ticks: [],
                                mode: "time"
                            },
                            yaxis: {
                                ticks: [],
                                autoscaleMargin: 0.2,
                                min: 0
                            },
                            selection: {
                                mode: "x",
                                color: "#B28053"
                            },
                            grid: {
                                markings: ranges
                            }
                        };

                        var overviewActivity = $.plot("#activityoverview", [{ data: points, color: "#FF5600" }], overviewOptions);

                        if (oldRange != null) {
                            overviewActivity.setSelection(oldRange, true);
                        }

                        $("#activity").bind("plotselected", function (event, ranges) {
                            activity = $.plot("#activity", [{ data: points, color: "#FF5600" }], $.extend(true, {}, options, {
                                xaxis: {
                                    min: ranges.xaxis.from,
                                    max: ranges.xaxis.to
                                }
                            }));

                            overviewActivity.setSelection(ranges, true);
                            zoomed = true;
                            oldRange = ranges;
                        });

                        $("#activityoverview").bind("plotselected", function (event, ranges) {
                            activity.setSelection(ranges);
                            zoomed = true;
                        });
                    }
                });
            });
        }

        function GetDatesFromStrings(data) {
            var ret = Array(data.length);

            for (var i = 0; i < data.length; i++) {
                ret[i] = new Date(parseInt(data[i].substr(6))).getTime();
            }

            return ret;
        }
    </script>
</head>
<body>
    <header>
        <h1>CubeWorld Server Statistics</h1>
    </header>
    <div id="container">
        <section>
            @if (Model.IsAlive)
            { 
                <ul class="table">
                    <li>
                        <h6>Active players</h6>
                        <p id="active">@Model.PlayerStats.Current.ToString()</p>
                    </li>
                    <li>
                        <h6>Total players</h6>
                        <p id="total">@Model.PlayerStats.Total.ToString()</p>
                    </li>
                    <li>
                        <h6>Runtime</h6>
                        <p id="runtime">@Model.FormatedRuntime</p>
                    </li>
                </ul>
                
                if (CWSWeb.Helper.CachedVariables.Stats != null && CWSWeb.Helper.CachedVariables.Stats.Keys != null && CWSWeb.Helper.CachedVariables.Stats.Keys.Length >= 2)
                { 
                <h2>Player activity</h2>
                <div id="activity" class="graph"></div>
                <div id="activityoverview" class="graph" style="height: 150px"></div>
                }
                else
                { 
                <p class="message">The graphs are not available at this time.</p>
                }
            }
            else
            { 
                <p class="message">The server is offline</p>
            }
        </section>
    </div>
    <footer>
        <p>This data is gathered using <a href="http://chrisk91.github.io/CWSRestart/">CWSRestart</a>. Underlying data is updated every five seconds.</p>
    </footer>
</body>
</html>
