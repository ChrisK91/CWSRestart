@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CWSWeb.Helper.CachedVariables.Statistics>
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>A CubeWorld Server Status Page</title>

    <script src="/static/js/jquery-1.10.2.min.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.time.js" type="text/javascript"></script>
    <script src="/static/js/jquery.flot.selection.js" type="text/javascript"></script>

    <link href="@Url.Content("~/static/css/style.css")" rel="stylesheet" />

    <script type="text/javascript">
        $(document).ready(function () {
            @if (Model.Keys != null && Model.PlayerStats != null && Model.Keys.Length > 0 && Model.Keys[0] != null)
            { 
                <text>
            GeneratePlayerActivity();
                </text>            
            }
        });

        function GeneratePlayerActivity() {
            $.getJSON("/API/stats/playeractivity", function (data) {
                var dates = GetDatesFromStrings(data.labels);
                var points = new Array(dates.length);

                for (var i = 0; i < dates.length; i++) {
                    points[i] = [dates[i], data.data[i]];
                }

                var options = {
                    xaxis: {
                        mode: "time"
                    },
                    yaxis: {
                        minTickSize: 1,
                        min: 0
                    }
                };

                var activity = $.plot("#activity", [{ data: points }], options);

                var overviewActivity = $.plot("#activityoverview", [{ data: points }], {
                    series: {
                        lines: {
                            show: true,
                            lineWidth: 1
                        },
                        shadowSize: 0
                    },
                    xaxis: {
                        ticks: [],
                        mode: "time"
                    },
                    yaxis: {
                        ticks: [],
                        autoscaleMargin: 0.2,
                        min: 0
                    },
                    selection: {
                        mode: "x"
                    }
                });

                $("#activity").bind("plotselected", function (event, ranges) {
                    activity = $.plot("#activity", [{ data: points }], $.extend(true, {}, options, {
                        xaxis: {
                            min: ranges.xaxis.from,
                            max: ranges.xaxis.to
                        }
                    }));

                    overviewActivity.setSelection(ranges, true);
                });

                $("#activityoverview").bind("plotselected", function (event, ranges) {
                    activity.setSelection(ranges);
                });
            });
        }

        function GetDatesFromStrings(data) {
            var ret = Array(data.length);

            for(var i = 0; i < data.length; i++)
            {
                ret[i] = new Date(parseInt(data[i].substr(6))).getTime();
            }

            return ret;
        }
    </script>
</head>
<body>
    <header>
        <h1>CubeWorld Server Statistics</h1>
    </header>
    <div id="container">
        <section>
            @if (Model.IsAlive)
            { 
                <ul class="table">
                    <li><h6>Active players</h6><p>@Model.PlayerStats.Current.ToString()</p></li>
                    <li><h6>Total players</h6><p>@Model.PlayerStats.Total.ToString()</p></li>
                    <li><h6>Runtime</h6><p>@Model.FormatedRuntime</p></li>
                </ul>
                
                if (Model.Keys != null && Model.ActivePlayers != null && Model.Keys.Length > 0 && Model.Keys[0] != null)
                { 
                    <h2>Player activity</h2>
                    <div id="activity" class="graph"></div>
                    <div id="activityoverview" class="graph" style="height: 150px"></div>
                }
            }
            else { 
                <h2>The server is offline</h2>
            }
        </section>
    </div>
    <footer><p>This data is gathered using <a href="http://chrisk91.github.io/CWSRestart/">CWSRestart</a>. Underlying data is updated every five seconds.</p></footer>
</body>
</html>